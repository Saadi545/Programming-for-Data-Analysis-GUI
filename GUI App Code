import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from io import StringIO
import numpy as np

class DataAnalysisApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Analysis GUI")
        self.root.geometry("600x500")
        self.root.config(bg="#2E3B4E")  # Set background color

        self.data = None
        self.model = None

        # Title Label
        title_label = tk.Label(root, text="Data Analysis Application", font=("Helvetica", 16, "bold"), fg="#F4F4F4", bg="#2E3B4E")
        title_label.pack(pady=20)

        # Styled Buttons
        button_style = {"font": ("Arial", 12, "bold"), "bg": "#4CAF50", "fg": "white", "activebackground": "#45A049", "width": 25, "height": 2}

        tk.Button(root, text="Load Dataset", command=self.load_dataset, **button_style).pack(pady=10)
        tk.Button(root, text="Show Summary", command=self.show_summary, **button_style).pack(pady=10)
        tk.Button(root, text="Visualize Data", command=self.visualize_data, **button_style).pack(pady=10)
        tk.Button(root, text="Export Data", command=self.export_data, **button_style).pack(pady=10)
        tk.Button(root, text="Predict with Model", command=self.predict_with_model, **button_style).pack(pady=10)

    def load_dataset(self):
        # Use the provided sample data
        sample_data = """No,year,month,day,hour,PM2.5,PM10,SO2,NO2,CO,O3,TEMP,PRES,DEWP,RAIN,wd,WSPM,station
1,2013,3,1,0,4,4,4,7,300,77,-0.7,1023,-18.8,0,NNW,4.4,Aotizhongxin
2,2013,3,1,1,8,8,4,7,300,77,-1.1,1023.2,-18.2,0,N,4.7,Aotizhongxin
3,2013,3,1,2,7,7,5,10,300,73,-1.1,1023.5,-18.2,0,NNW,5.6,Aotizhongxin
4,2013,3,1,3,6,6,11,11,300,72,-1.4,1024.5,-19.4,0,NW,3.1,Aotizhongxin
5,2013,3,1,4,3,3,12,12,300,72,-2,1025.2,-19.5,0,N,2,Aotizhongxin
6,2013,3,1,5,5,5,18,18,400,66,-2.2,1025.6,-19.6,0,N,3.7,Aotizhongxin
7,2013,3,1,6,3,3,18,32,500,50,-2.6,1026.5,-19.1,0,NNE,2.5,Aotizhongxin
13,2013,3,1,12,6,NA,3,NA,200,85,4.8,1023.8,-19.7,0,N,3,Dingling
14,2013,3,1,13,7,7,3,2,200,84,5.8,1022.8,-20.6,0,NE,4.4,Dingling
15,2013,3,1,14,6,7,3,NA,200,89,5.9,1022.6,-20.5,0,N,3.6,Dingling
16,2013,3,1,15,10,10,3,NA,200,88,6,1022.6,-20.4,0,N,3.2,Dingling
17,2013,3,1,16,3,6,3,NA,200,87,5.4,1022.8,-20,0,NE,2.2,Dingling
18,2013,3,1,17,5,5,3,NA,200,87,3.5,1023.4,-20.8,0,ENE,2,Dingling
19,2013,3,1,18,11,23,8,28,400,79,3.2,1029.4,-20.3,0,NNW,0.5,Dongsi
20,2013,3,1,19,13,17,12,42,600,63,3,1030.1,-19.7,0,N,1.1,Dongsi
21,2013,3,1,20,5,13,9,38,500,64,1.6,1031.3,-19,0,ENE,1.2,Dongsi"""

        try:
            self.data = pd.read_csv(StringIO(sample_data))
            messagebox.showinfo("Success", "Sample dataset loaded successfully!")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load dataset: {e}")

    def show_summary(self):
        if self.data is None:
            messagebox.showwarning("Warning", "Please load a dataset first!")
            return

        summary = self.data.describe()
        summary_window = tk.Toplevel(self.root)
        summary_window.title("Dataset Summary")
        summary_window.config(bg="#2E3B4E")

        text = tk.Text(summary_window, wrap="none", width=100, height=30, bg="#F4F4F4", fg="#2E3B4E", font=("Courier", 10))
        text.insert(tk.END, summary.to_string())
        text.pack()

    def visualize_data(self):
        if self.data is None:
            messagebox.showwarning("Warning", "Please load a dataset first!")
            return

        columns = list(self.data.columns)
        col_window = tk.Toplevel(self.root)
        col_window.title("Select Columns to Visualize")
        col_window.config(bg="#2E3B4E")

        tk.Label(col_window, text="Select Column:", bg="#2E3B4E", fg="white", font=("Arial", 12)).pack()
        selected_col = tk.StringVar(col_window)
        selected_col.set(columns[0])
        dropdown = tk.OptionMenu(col_window, selected_col, *columns)
        dropdown.pack()

        def plot_column():
            col = selected_col.get()
            plt.figure(figsize=(8, 5))
            if pd.api.types.is_numeric_dtype(self.data[col]):
                sns.histplot(self.data[col], kde=True, color="blue")
                plt.title(f"Histogram of {col}")
            else:
                sns.countplot(x=self.data[col], palette="pastel")
                plt.title(f"Countplot of {col}")
            plt.show()

        tk.Button(col_window, text="Visualize", command=plot_column, font=("Arial", 12), bg="#4CAF50", fg="white", width=15).pack(pady=10)

    def predict_with_model(self):
        if self.data is None:
            messagebox.showwarning("Warning", "Please load a dataset first!")
            return

        # Preprocessing: Use numeric columns for training a simple RandomForest model
        try:
            numeric_data = self.data.select_dtypes(include=[np.number])
            X = numeric_data.drop("PM2.5", axis=1)
            y = numeric_data["PM2.5"]

            # Split data
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # Train a model
            self.model = RandomForestRegressor(n_estimators=100, random_state=42)
            self.model.fit(X_train, y_train)

            # Predict on test data
            predictions = self.model.predict(X_test)
            mse = mean_squared_error(y_test, predictions)

            # Display Results
            results_window = tk.Toplevel(self.root)
            results_window.title("Model Predictions")
            results_window.config(bg="#2E3B4E")

            results_text = f"Mean Squared Error: {mse:.2f}\n\nPredictions:\n{predictions}"
            text = tk.Text(results_window, wrap="none", width=80, height=20, bg="#F4F4F4", fg="#2E3B4E", font=("Courier", 10))
            text.insert(tk.END, results_text)
            text.pack()

        except Exception as e:
            messagebox.showerror("Error", f"Failed to train model: {e}")

    def export_data(self):
        if self.data is None:
            messagebox.showwarning("Warning", "Please load a dataset first!")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files", "*.csv")])
        if file_path:
            try:
                self.data.to_csv(file_path, index=False)
                messagebox.showinfo("Success", "Dataset exported successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export dataset: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = DataAnalysisApp(root)
    root.mainloop()
